//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//package gui;import ai.Aiv12;import java.awt.Graphics;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.io.FileNotFoundException;import java.util.Random;import javax.swing.ImageIcon;import javax.swing.JPanel;import javax.swing.Timer;import map.Map;import map.MapS;import player.GreenPlayer;import player.Player;import player.RedPlayer;public class Board extends JPanel implements KeyListener, ActionListener {    public static final int HEIGHT = 720;    public static final int WIDTH = 700;    private final int offsetx = 20;    private final int offsety = 20;    Map map;    RedPlayer red;    GreenPlayer green;    Timer timer;    int x = 0;    int y = 0;    Aiv12 aiv12 = new Aiv12();    boolean finished = false;    public Board() throws FileNotFoundException {        this.setFocusable(true);        this.addKeyListener(this);        this.map = new Map("/lib/map.txt");        this.red = new RedPlayer(10, 10, this.map);        this.green = new GreenPlayer(0, 0, this.map);        this.map.setGreen(0, 0);        this.map.setRed(10, 10);        this.timer = new Timer(27, this);        this.timer.start();        if ((new Random()).nextInt(2) == 1) {            this.setFirstTurn(this.red);        } else {            this.setFirstTurn(this.green);        }    }    public Board(Map m) {        this.setFocusable(true);        this.addKeyListener(this);        this.map = m;        this.red = new RedPlayer(10, 10, this.map);        this.green = new GreenPlayer(0, 0, this.map);        this.map.setGreen(0, 0);        this.map.setRed(10, 10);        this.timer = new Timer(27, this);        this.timer.start();        if ((new Random()).nextInt(2) == 1) {            this.setFirstTurn(this.green);        } else {            this.setFirstTurn(this.red);        }    }    private void setFirstTurn(Player p) {        p.setTurn(true);    }    private void changeTurn() {        if (this.green.getTurn()) {            this.green.setTurn(false);            this.red.setTurn(true);        } else {            this.green.setTurn(true);            this.red.setTurn(false);        }    }    public void paintComponent(Graphics g) {        super.paintComponent(g);        g.drawImage(this.map.getImageMap(), 0, 0, this);        for(int x = 0; x < 11; ++x) {            for(int y = 0; y < 11; ++y) {                if (!this.map.isSpace(x, y)) {                    g.drawImage(this.map.getImage(x, y), x * 60 + 20, y * 60 + 20, this);                }            }        }        g.drawImage(this.red.getImage(), this.red.xp + 20, this.red.yp + 20, this);        g.drawImage(this.green.getImage(), this.green.xp + 20, this.green.yp + 20, this);        if (this.finished) {            if (this.red.goable(this.map)) {                g.drawImage((new ImageIcon(this.getClass().getResource("/lib/rw.png"))).getImage(), 0, 0, this);            } else {                g.drawImage((new ImageIcon(this.getClass().getResource("/lib/gw.png"))).getImage(), 0, 0, this);            }        }        this.repaint();    }    public void keyTyped(KeyEvent ke) {    }    public void keyPressed(KeyEvent ke) {    }    public void keyReleased(KeyEvent ke) {        if (this.green.getTurn() && !this.finished) {            int k = ke.getKeyCode();            int dir = -1;            if (k == 38) {                dir = 2;            } else if (k == 40) {                dir = 0;            } else if (k == 37) {                dir = 1;            } else if (k == 39) {                dir = 3;            }            if (this.green.move(dir)) {                this.map.setGreen(this.green.getX(), this.green.getY());                this.changeTurn();            }        }    }    public void actionPerformed(ActionEvent ae) {        if (!this.finished) {            if (!this.green.goable(this.map)) {                System.out.println("Do Thang");                this.finished = true;            } else if (this.red.getTurn()) {                Long T = System.nanoTime();                this.red.move(this.aiv12.findDirection(new MapS(this.map), this.red.getX(), this.red.getY(), this.green.getX(), this.green.getY()));                this.map.setRed(this.red.getX(), this.red.getY());                if (!this.red.goable(this.map)) {                    System.out.println("Xanh Thang");                    this.finished = true;                } else {                    this.changeTurn();                }            }        }    }}